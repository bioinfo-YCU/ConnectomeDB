---
title: "ConnectomeDB2025"
execute:
  echo: false
format:
  html:
    table: false
---

***

```{python}
import sys
import os
import pandas as pd
from itables import init_notebook_mode, show
from IPython.display import display, Javascript
import itables.options as opt
sys.path.append(os.path.abspath("src"))  # Add src directory to path
from createDataTable import gene_pair

# Custom CSS for styling
css = """
.dt-container {
  font-size: 15px;
  margin: 0px 0;  /* Add spacing if needed */
}

.dt-column-title {
    font-size: 24px !important;
    font-weight: bold !important; 
    color: #333 !important;
}


.dt-buttons button {
    font-size: 18px !important;
    padding: 10px 20px !important;
    background-color: #007BFF !important;
    color: white !important;
    border: none !important;
    border-radius: 5px !important;
    margin: 5px !important;
    cursor: pointer !important;
}

.dt-buttons button:hover {
    background-color: #0056b3 !important;
}

/* Styling the input field text */
.dt-input {
    font-style: italic; /* Make the input text italic */
    border: 5px solid #ccc; /* Add a light border */
    border-radius: 4px; /* Optional: Rounded corners */
    padding: 2px; /* Add some padding */
    font-size: 14px; /* Adjust font size */
}

/* Styling the placeholder text */
.dt-input::placeholder {
    color: gray; /* Placeholder color */
    font-style: italic; /* Make placeholder text italic */
    opacity: 0.8; /* Optional: Slightly transparent */
}

/* Targeting the input fields within the th elements that have the dtfc-fixed-start and dtfc-fixed-left classes */
th.dtfc-fixed-start.dtfc-fixed-left input[type="text"] {
    width: 50px;  /* Adjust the width to make the input field shorter */
}

span.dt-column-title input[type="text"] {
    width: 50px;  /* Adjust the width to make the input field shorter */
}

/* Ensure a max-width for all table cells */
table.dataTable td,
table.dataTable th {
    max-width: 200px; /* Set your preferred max width */
    text-overflow: ellipsis; /* Handle overflow with ellipsis */
    overflow: hidden; /* Hide overflow content */
    white-space: nowrap; /* Prevent text wrapping */
}

/* Adjust fixed columns */
.dtfc-fixed-left, .dtfc-fixed-right {
    background-color: #f9f9f9; /* Match table body */
    border-right: 1px solid #ddd; /* Optional border */
}

/* Table wrapper adjustments */
.dataTables_wrapper {
    overflow-x: auto; /* Allow horizontal scrolling */
    width: 100%; /* Ensure full width */
}

/* Fixed header alignment */
.dataTables_scrollHeadInner {
    width: 100% !important; /* Match the table's width */
}


table.dataTable thead th {
    text-align: center; /* Center-align headers */
    vertical-align: middle; /* Center headers vertically */
}



"""

# JavaScript code for filtering
custom_js = """
    {
        extend: 'button',
        text: 'Filter by Mouse (MGI) ID',
        action: function (e, dt, node, config) {
            // Toggle filter
            if ($.fn.dataTable.ext.search.length > 0) {
                // Clear filters
                $.fn.dataTable.ext.search = [];
            } else {
                // Add filter for non-empty "Ligand Mouse (MGI) ID" column
                $.fn.dataTable.ext.search.push(
                    function(settings, data, dataIndex) {
                        return data[1] !== ''; // Assuming "Ligand Mouse (MGI) ID" is column index 1
                    }
                );
            }
            dt.draw(); // Redraw the table
        }
    }
"""



# Function to update and display the table
def update_table():
    show(
        gene_pair,
        keys=True,
        #layout={"bottom": "searchBuilder", "title": "Advanced Search"},
        fixedColumns={"start": 1, "end": 0},
        fixedHeader=True,  # Keep header fixed for alignment
        column_filters="footer", 
        scrollX=True,
        classes="display nowrap cell-border compact",
        select=True,
        selected_rows=[],
        responsive=True,  # Enable responsive behavior
        theme='grid',
        search={"regex": True, "caseInsensitive": False, "smart": True},
        lengthMenu=[ [10, 20, 50, 100, -1], ["10", "20", "50", "100", "All"] ],
        buttons=[
            "pageLength",  
            {"extend": "colvis", "text": "Display Columns"},
            {"extend": "csvHtml5", "title": "Source"},
            {"extend": "excelHtml5", "title": "Source"},
            {"extend": "copyHtml5", "title": "Source"},
        ],
        columnDefs=[
            {"className": "dt-center", "targets": [4]}, 
            # {"width": "100px", "targets": "_all"},
            {"targets": [-4, -3, -2, -1], "visible": False} # Hide last two columns by default
        ],
        style="1200px;margin:auto",
           language={
            "search": "Search Any Column:",
            "searchPlaceholder": "e.g. CD24",
           # "searchBuilder": {
           #     "title": "Advanced Search <i>Multiple filtering, AND/OR condition</i>" 
           # }
        }, 
        autoWidth=True,
        maxBytes=0,  # So it does not downsample
        initCode='''
            $(document).on('draw.dt', function () {
                $($.fn.dataTable.tables(true)).DataTable().columns.adjust();
            });
    '''
    )
      

# Call the function to render the table
update_table()
```

