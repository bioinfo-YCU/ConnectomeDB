)
# Resolve dataset name
if (!(species_name %in% names(species_lookup))) {
  stop(paste("Species not supported:", species_name))
}
dataset_name <- species_lookup[[species_name]]
# Log retrieval time
cat("Retrieving for", species_name, "on", format(Sys.Date(), "%d-%b-%Y"), "\n")
# Connect to BioMart
ensembl <- useMart("ensembl", dataset = dataset_name)
# Retrieve mapping
gene_map <- getBM(
  attributes = c("ensembl_gene_id", "uniprotswissprot"),
  mart = ensembl
)
# Filter and deduplicate
gene_map <- gene_map %>%
  filter(uniprotswissprot != "", !is.na(uniprotswissprot)) %>%
  distinct()
# Save to file
out_file <- paste0("data/", species_name, "_uniprot_to_ensembl.tsv")
write.table(gene_map, file = out_file, sep = "\t", quote = FALSE, row.names = FALSE)
cat("Saved to", out_file, "\n")
species_name <- "pig"  # options: mouse, rat, cow, etc.
# Lookup table: species → Ensembl code
species_lookup <- list(
  mouse       = "mmusculus_gene_ensembl",
  rat         = "rnorvegicus_gene_ensembl",
  zebrafish   = "drerio_gene_ensembl",
  chimpanzee  = "ptroglodytes_gene_ensembl",
  chicken     = "ggallus_gene_ensembl",
  pig         = "sscrofa_gene_ensembl",
  cow         = "btaurus_gene_ensembl",
  dog         = "clfamiliaris_gene_ensembl",
  horse       = "ecaballus_gene_ensembl",
  sheep       = "oarambouillet_gene_ensembl",
  marmoset    = "cjacchus_gene_ensembl",
  macaque     = "mmulatta_gene_ensembl"
)
# Resolve dataset name
if (!(species_name %in% names(species_lookup))) {
  stop(paste("Species not supported:", species_name))
}
dataset_name <- species_lookup[[species_name]]
# Log retrieval time
cat("Retrieving for", species_name, "on", format(Sys.Date(), "%d-%b-%Y"), "\n")
# Connect to BioMart
ensembl <- useMart("ensembl", dataset = dataset_name)
# Retrieve mapping
gene_map <- getBM(
                                                 prot"),
  mart = ensembl
)
# Filter and deduplicate
gene_map <- gene_map %>%
  filter(uniprotswissprot != "", !is.na(uniprotswissprot)) %>%
  distinct()
# Save to file
out_file <- paste0("data/", species_name, "_uniprot_to_ensembl.tsv")
write.table(gene_map, file = out_file, sep = "\t", quote = FALSE, row.names = FALSE)
cat("Saved to", out_file, "\n")
species_name <- "cow"  # options: mouse, rat, cow, etc.
# Lookup table: species → Ensembl code
species_lookup <- list(
  mouse       = "mmusculus_gene_ensembl",
  rat         = "rnorvegicus_gene_ensembl",
  zebrafish   = "drerio_gene_ensembl",
  chimpanzee  = "ptroglodytes_gene_ensembl",
  chicken     = "ggallus_gene_ensembl",
  pig         = "sscrofa_gene_ensembl",
  cow         = "btaurus_gene_ensembl",
  dog         = "clfamiliaris_gene_ensembl",
  horse       = "ecaballus_gene_ensembl",
  sheep       = "oarambouillet_gene_ensembl",
  marmoset    = "cjacchus_gene_ensembl",
  macaque     = "mmulatta_gene_ensembl"
)
# Resolve dataset name
if (!(species_name %in% names(species_lookup))) {
  stop(paste("Species not supported:", species_name))
}
dataset_name <- species_lookup[[species_name]]
# Log retrieval time
cat("Retrieving for", species_name, "on", format(Sys.Date(), "%d-%b-%Y"), "\n")
# Connect to BioMart
ensembl <- useMart("ensembl", dataset = dataset_name)
# Retrieve mapping
gene_map <- getBM(
  attributes = c("ensembl_gene_id", "uniprotswissprot"),
  mart = ensembl
)
# Filter and deduplicate
gene_map <- gene_map %>%
  filter(uniprotswissprot != "", !is.na(uniprotswissprot)) %>%
  distinct()
# Save to file
out_file <- paste0("data/", species_name, "_uniprot_to_ensembl.tsv")
write.table(gene_map, file = out_file, sep = "\t", quote = FALSE, row.names = FALSE)
cat("Saved to", out_file, "\n")
# Set species here
species_name <- "dog"  # options: mouse, rat, cow, etc.
# Lookup table: species → Ensembl code
species_lookup <- list(
  mouse       = "mmusculus_gene_ensembl",
  rat         = "rnorvegicus_gene_ensembl",
  zebrafish   = "drerio_gene_ensembl",
  chimpanzee  = "ptroglodytes_gene_ensembl",
  chicken     = "ggallus_gene_ensembl",
  pig         = "sscrofa_gene_ensembl",
  cow         = "btaurus_gene_ensembl",
  dog         = "clfamiliaris_gene_ensembl",
  horse       = "ecaballus_gene_ensembl",
  sheep       = "oarambouillet_gene_ensembl",
  marmoset    = "cjacchus_gene_ensembl",
  macaque     = "mmulatta_gene_ensembl"
)
# Resolve dataset name
if (!(species_name %in% names(species_lookup))) {
  stop(paste("Species not supported:", species_name))
}
dataset_name <- species_lookup[[species_name]]
# Log retrieval time
cat("Retrieving for", species_name, "on", format(Sys.Date(), "%d-%b-%Y"), "\n")
# Connect to BioMart
ensembl <- useMart("ensembl", dataset = dataset_name)
# Retrieve mapping
gene_map <- getBM(
  attributes = c("ensembl_gene_id", "uniprotswissprot"),
  mart = ensembl
)
# Filter and deduplicate
gene_map <- gene_map %>%
  filter(uniprotswissprot != "", !is.na(uniprotswissprot)) %>%
  distinct()
# Save to file
out_file <- paste0("data/", species_name, "_uniprot_to_ensembl.tsv")
write.table(gene_map, file = out_file, sep = "\t", quote = FALSE, row.names = FALSE)
cat("Saved to", out_file, "\n")
# Set species here
species_name <- "marmoset"  # options: mouse, rat, cow, etc.
# Lookup table: species → Ensembl code
species_lookup <- list(
  mouse       = "mmusculus_gene_ensembl",
  rat         = "rnorvegicus_gene_ensembl",
  zebrafish   = "drerio_gene_ensembl",
  chimpanzee  = "ptroglodytes_gene_ensembl",
  chicken     = "ggallus_gene_ensembl",
  pig         = "sscrofa_gene_ensembl",
  cow         = "btaurus_gene_ensembl",
  dog         = "clfamiliaris_gene_ensembl",
  horse       = "ecaballus_gene_ensembl",
  sheep       = "oarambouillet_gene_ensembl",
  marmoset    = "cjacchus_gene_ensembl",
  macaque     = "mmulatta_gene_ensembl"
)
# Resolve dataset name
if (!(species_name %in% names(species_lookup))) {
  stop(paste("Species not supported:", species_name))
}
dataset_name <- species_lookup[[species_name]]
# Log retrieval time
cat("Retrieving for", species_name, "on", format(Sys.Date(), "%d-%b-%Y"), "\n")
# Connect to BioMart
ensembl <- useMart("ensembl", dataset = dataset_name)
# Retrieve mapping
gene_map <- getBM(
  attributes = c("ensembl_gene_id", "uniprotswissprot"),
  mart = ensembl
)
# Filter and deduplicate
gene_map <- gene_map %>%
  filter(uniprotswissprot != "", !is.na(uniprotswissprot)) %>%
  distinct()
# Save to file
out_file <- paste0("data/", species_name, "_uniprot_to_ensembl.tsv")
write.table(gene_map, file = out_file, sep = "\t", quote = FALSE, row.names = FALSE)
cat("Saved to", out_file, "\n")
species_name <- "macaque"  # options: mouse, rat, cow, etc.
# Lookup table: species → Ensembl code
species_lookup <- list(
  mouse       = "mmusculus_gene_ensembl",
  rat         = "rnorvegicus_gene_ensembl",
  zebrafish   = "drerio_gene_ensembl",
  chimpanzee  = "ptroglodytes_gene_ensembl",
  chicken     = "ggallus_gene_ensembl",
  pig         = "sscrofa_gene_ensembl",
  cow         = "btaurus_gene_ensembl",
  dog         = "clfamiliaris_gene_ensembl",
  horse       = "ecaballus_gene_ensembl",
  sheep       = "oarambouillet_gene_ensembl",
  marmoset    = "cjacchus_gene_ensembl",
  macaque     = "mmulatta_gene_ensembl"
)
# Resolve dataset name
if (!(species_name %in% names(species_lookup))) {
  stop(paste("Species not supported:", species_name))
}
dataset_name <- species_lookup[[species_name]]
# Log retrieval time
cat("Retrieving for", species_name, "on", format(Sys.Date(), "%d-%b-%Y"), "\n")
# Connect to BioMart
ensembl <- useMart("ensembl", dataset = dataset_name)
# Retrieve mapping
gene_map <- getBM(
  attributes = c("ensembl_gene_id", "uniprotswissprot"),
  mart = ensembl
)
# Filter and deduplicate
gene_map <- gene_map %>%
  filter(uniprotswissprot != "", !is.na(uniprotswissprot)) %>%
  distinct()
# Save to file
out_file <- paste0("data/", species_name, "_uniprot_to_ensembl.tsv")
write.table(gene_map, file = out_file, sep = "\t", quote = FALSE, row.names = FALSE)
cat("Saved to", out_file, "\n")
q()
library(biomaRt)
library(tidyverse)
library(readr)
print(paste0("Retrieving on: ", format(Sys.Date(), "%d-%b-%Y")))
get_species_orthologs <- function(orig_species, species_name) {
  # Set species-specific gene ID and symbol fields for original species
  orig_species_id <- switch(orig_species,
                            "mmusculus" = "mgi_id",
                            "rnorvegicus" = "rgd_id",
                            "drerio" = "zfin_id_id",
                            "hsapiens" = "hgnc_id",
                            "ensembl_gene_id")  # default
  
  orig_species_symbol <- switch(orig_species,
                                "mmusculus" = "mgi_symbol",
                                "rnorvegicus" = "rgd_symbol",
                                "drerio" = "external_gene_name",
                                "hsapiens" = "hgnc_symbol",
                                "external_gene_name")  # default
  
  # Set gene ID field for target species
  species_id <- switch(species_name,
                       "mmusculus" = "mgi_id",
                       "rnorvegicus" = "rgd_id",
                       "drerio" = "zfin_id_id",
                       "hsapiens" = "hgnc_id",
                       "ensembl_gene_id")  # default
  
  # Connect to Ensembl BioMart (original species)
  ensembl <- biomaRt::useMart("ensembl", dataset = paste0(orig_species, "_gene_ensembl"))
  
  # Retrieve genes from original species
  orig_genes <- biomaRt::getBM(
    attributes = c(orig_species_id, orig_species_symbol, "ensembl_gene_id"),
    mart = ensembl
  )
  
  # Define ortholog attribute names
  species_column <- paste0(species_name, "_homolog_ensembl_gene")
  species_gene_name <- paste0(species_name, "_homolog_associated_gene_name")
  species_gene_GOC <- paste0(species_name, "_homolog_goc_score")
  species_gene_WGA <- paste0(species_name, "_homolog_wga_coverage")
  species_gene_identToQuery <- paste0(species_name, "_homolog_perc_id")
  species_gene_identToTarget <- paste0(species_name, "_homolog_perc_id_r1")
  species_gene_confidence <- paste0(species_n  species_gene_confidence <- paste0(species_nGet orthologs from original species mart
  attributes_list <- c(
    "ensembl_gene_id",
    species_column, 
    species_gene_name,
    species_gene_GOC,
    species_gene_WGA,
    species_gene_identToQuery,
    species_gene_identToTarget,
    species_gene_confidence
  )
  
  orth_genes <- biomaRt::getBM(
    attributes = attributes_list,
    mart = ensembl
  )
  
  result <- merge(orig_genes, orth_genes, by = "ensembl_gene_id", all.x = TRUE)
  
  # Connect to ortholog species dataset
  ensembl_orthologs <- biomaRt::useMart("ensembl", dataset = paste0(species_name, "_gene_ensembl"))
  
  species_gene_name_long <- if (species_name == "mmusculus") {
    "mgi_description"
  } else {
    "description"
  }
  
  # Get additional info from ortholog species
  orthologs <- biomaRt::getBM(
    attributes = c("ensembl_gene_id", species_id, species_gene_name_long),
    mart = ensembl_orthologs
  )
  
  # Merge to enrich with species-specific ID/symbol
  colnames(orthologs)[1] <- species_column  # match column for merge
  final_result <- merge(result, orthologs, by = species_column, all.x = TRUE)
  
  # Remove rows with empty or NA original species ID
  final_result <- final_result[final_result[[orig_species_id]] != "", ]
  final_result <- final_result[!is.na(final_result[[orig_species_id]]), ]
  
  # Write result
  readr::write_csv(final_result, paste0("data/", species_name  "_ID_biomart_", orig_species, "_centric.csv"))
  
  return(final_result)
}
get_species_orthologs <- function(orig_species, species_name) {
  # Set species-specific gene ID and symbol fields for original species
  orig_species_id <- switch(orig_species,
                            "mmusculus" = "mgi_id",
                            "rnorvegicus" = "rgd_id",
                            "drerio" = "zfin_id_id",
                            "hsapiens" = "hgnc_id",
                            "ensembl_gene_id")  # default
  
  orig_species_symbol <- switch(orig_species,
                                "mmusculus" = "mgi_symbol",
                                "rnorvegicus" = "rgd_symbol",
                                "drerio" = "external_gene_name",
                                "hsapiens" = "hgnc_symbol",
                                "external_gene_name")  # default
  
  # Set gene ID field for target species
  species_id <- switch(species_name,
                       "mmusculus" = "mgi_id",
                       "rnorvegicus" = "rgd_id",
                       "drerio" = "zfin_id_id",
                       "hsapiens" = "hgnc_id",
                       "ensembl_gene_id")  # default
  
  # Connect to Ensembl BioMart (original species)
  ensembl <- biomaRt::useMart("ensembl", dataset = paste0(orig_species, "_gene_ensembl"))
  
  # Retrieve genes from original species
  orig_genes <- biomaRt::getBM(
    attributes = c(orig_species_id, orig_species_symbol, "ensembl_gene_id"),
    mart = ensembl
  )
  
  # Define ortholog attribute names
  species_column <- paste0(species_name, "_homolog_ensembl_gene")
  species_gene_name <- paste0(species_name, "_homolog_associated_gene_name")
  species_gene_GOC <- paste0(species_name, "_homolog_goc_score")
  species_gene_WGA <- paste0(species_name, "_homolog_wga_coverage")
  species_gene_identToQuery <- paste0(species_name, "_homolog_perc_id")
  species_gene_identToTarget <- paste0(species_name, "_homolog_perc_id_r1")
  species_gene_confidence <- paste0(species_name, "_homolog_orthology_confidence")
  
  # Get orthologs from original species mart
  attributes_list <- c(
    "ensembl_gene_id",
    species_column, 
    species_gene_name,
    species_gene_GOC,
    species_gene_WGA,
    species_gene_identToQuery,
    species_gene_identToTarget,
    species_gene_confidence
  )
  
  orth_genes <- biomaRt::getBM(
    attributes = attributes_list,
    mart = ensembl
  )
  
  result <- merge(orig_genes, orth_genes, by = "ensembl_gene_id", all.x = TRUE)
  
  # Connect to ortholog species dataset
  ensembl_orthologs <- biomaRt::useMart("ensembl", dataset = paste0(species_name, "_gene_ensembl"))
  
  species_gene_name_long <- if (species_name == "mmusculus") {
    "mgi_description"
  } else {
    "description"
  }
  
  # Get additional info from ortholog species
  orthologs <- biomaRt::getBM(
    attributes = c("ensembl_gene_id", species_id, species_gene_name_long),
    mart = ensembl_orthologs
  )
  
  # Merge to enrich with species-specific ID/symbol
  colnames(orthologs)[1] <- species_column  # match column for merge
  final_result <- merge(result, orthologs, by = species_column, all.x = TRUE)
  
  # Remove rows with empty or NA original species ID
  final_result <- final_result[final_result[[orig_species_id]] != "", ]
  final_result <- final_result[!is.na(final_result[[orig_species_id]]), ]
  
  # Write result
  readr::write_csv(final_result, paste0("data/", species_name, "_ID_biomart_", orig_species, "_centric.csv"))
  
  return(final_result)
}
get_species_orthologs("hsapiens", "mmulatta")
get_species_orthologs("hsapiens", "cjacchus")
get_species_orthologs("hsapiens", "ptroglodytes")
get_species_orthologs("hsapiens", "ggallus")
get_species_orthologs("hsapiens", "sscrofa")
get_species_orthologs("hsapiens", "btaurus")
get_species_orthologs("hsapiens", "clfamiliaris")
get_species_orthologs("hsapiens", "ecaballus")
get_species_orthologs("hsapiens", "oarambouillet")
get_species_orthologs("hsapiens", "rnorvegicus")
get_species_orthologs("hsapiens", "drerio")
get_species_orthologs("hsapiens", "mmusculus")
q()
library(biomaRt)
library(tidyverse)
library(readr)
print(paste0("Retrieving on: ", format(Sys.Date(), "%d-%b-%Y")))
get_species_orthologs <- function(orig_species, species_name) {
  # Set species-specific gene ID and symbol fields for original species
  orig_species_id <- switch(orig_species,
                            "mmusculus" = "mgi_id",
                            "rnorvegicus" = "rgd_id",
                            "drerio" = "zfin_id_id",
                            "hsapiens" = "hgnc_id",
                            "ensembl_gene_id")  # default
  
  orig_species_symbol <- switch(orig_species,
                                "mmusculus" = "mgi_symbol",
                                "rnorvegicus" = "rgd_symbol",
                                "drerio" = "external_gene_name",
                                "hsapiens" = "hgnc_symbol",
                                "external_gene_name")  # default
  
  # Set gene ID field for target species
  species_id <- switch(species_name,
                       "mmusculus" = "mgi_id",
                       "rnorvegicus" = "rgd_id",
                       "drerio" = "zfin_id_id",
                       "hsapiens" = "hgnc_id",
                       "ensembl_gene_id")  # default
  
  # Connect to Ensembl BioMart (original species)
  ensembl <- biomaRt::useMart("ensembl", dataset = paste0(orig_species, "_gene_ensembl"))
  
  # Retrieve genes from original species
  orig_genes <- biomaRt::getBM(
    attributes = c(orig_species_id, orig_species_symbol, "ensembl_gene_id"),
    mart = ensembl
  )
  
  # Define ortholog attribute names
  species_column <- paste0(species_name, "_homolog_ensembl_gene")
  species_gene_name <- paste0(species_name, "_homolog_associated_gene_name")
  species_gene_GOC <- paste0(species_name, "_homolog_goc_score")
  species_gene_WGA <- paste0(species_name, "_homolog_wga_coverage")
  species_gene_identToQuery <- paste0(species_name, "_homolog_perc_id")
  species_gene_identToTarget <- paste0(species_name, "_homolog_perc_id_r1")
  species_gene_confidence <- paste0(species_name, "_homolog_orthology_confidence")
  
  # Get orthologs from original species mart
  attributes_list <- c(
    "ensembl_gene_id",
    species_column, 
    species_gene_name,
    species_gene_GOC,
    species_gene_WGA,
    species_gene_identToQuery,
    species_gene_identToTarget,
    species_gene_confidence
  )
  
  orth_genes <- biomaRt::getBM(
    attributes = attributes_list,
    mart = ensembl
  )
  
  result <- merge(orig_genes, orth_genes, by = "ensembl_gene_id", all.x = TRUE)
  
  # Connect to ortholog species dataset
  ensembl_orthologs <- biomaRt::useMart("ensembl", dataset = paste0(species_name, "_gene_ensembl"))
  
  species_gene_name_long <- if (species_name == "mmusculus") {
    "mgi_description"
  } else {
    "description"
  }
  
  # Get additional info from ortholog species
  orthologs <- biomaRt::getBM(
    attributes = c("ensembl_gene_id", species_id, species_gene_name_long),
    mart = ensembl_orthologs
  )
  
  # Merge to enrich with species-specific ID/symbol
  colnames(orthologs)[1] <- species_column  # match column for merge
  final_result <- merge(result, orthologs, by = species_column, all.x = TRUE)
  
  # Remove rows with empty or NA original species ID
  final_result <- final_result[final_result[[orig_species_id]] != "", ]
  final_result <- final_result[!is.na(final_result[[orig_species_id]]), ]
  
  # Write result
  readr::write_csv(final_result, paste0("data/", species_name, "_ID_biomart_", orig_species, "_centric.csv"))
  
  return(final_result)
}
get_species_orthologs("hsapiens", "xlaevis")
get_species_orthologs("hsapiens", "xtropicalis")
library(biomaRt)
mart <- useEnsembl(biomart = "ensembl", dataset = "xtropicalis_gene_ensembl")
mart <- useEnsembl(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
searchAttributes(mart, pattern = "homolog")
searchAttributes(mart, pattern = "xtropicalis")
get_species_orthologs("hsapiens", "xtropicalis")
get_species_orthologs("xtropicalis", "hsapiens")
q()
