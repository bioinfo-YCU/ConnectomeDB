---
title: "Chimp \u2013 *Pan troglodytes* (2025-09-26) </span>"
execute:
  echo: false
format:
  html:
    table: false
header-includes: <script src='../../js/keepDropdownMenuGold.js'></script>
---

***


```{=html}

<div id="loading-widget-page2" class="loading-container">
  <div class="loading-spinner"></div>
  <div class="loading-text">Loading chimp interactions database...</div>
  <div class="loading-subtext">This may take a few moments</div>
</div>

<div id="table-content2" style="opacity: 0;">

<!-- Injected automatically via Jinja -->
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
<link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.dataTables.min.css">
<link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.5.0/css/responsive.dataTables.min.css">
<link rel="stylesheet" href="https://cdn.datatables.net/select/1.7.0/css/select.dataTables.min.css">

<style>
    .dt-buttons {
        position: relative;
        z-index: 2; /* Your original value */
    }
    
    .dt-button-collection {
        z-index: 101; /* Your original value */
    }
    
    /* Mobile-only fixes for button collection */
    @media (max-width: 768px) {
        .dt-button-collection {
            z-index: 9999 !important;
            position: fixed !important;
            top: 10% !important; /* Move down from top to prevent cutting */
            left: 50% !important;
            transform: translateX(-50%) !important; /* Only horizontal centering */
            max-height: 80vh !important;
            max-width: 95vw !important;
            overflow-y: auto !important;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15) !important;
            border-radius: 4px !important;
        }
        
        /* Ensure DataTable wrapper doesn't clip the dropdown */
        .dataTables_wrapper {
            overflow: visible !important;
        }
        
        /* Center-align and make buttons wrap properly */
        .dataTables_wrapper .dt-buttons {
            float: none !important;
            display: flex !important;
            flex-wrap: wrap !important;
            justify-content: center !important; /* Center align buttons */
            gap: 5px !important;
            width: 100% !important;
            max-width: 100% !important;
            overflow: visible !important;
        }
        
        /* Make individual buttons responsive */
        .dt-buttons .dt-button {
            flex: 0 1 auto !important;
            min-width: 0 !important;
            white-space: nowrap !important;
            font-size: 0.8rem !important;
            padding: 0.3rem 0.5rem !important;
        }
        
        .selection-counter {
            float: right;
            display: block;
            margin: 10px 10px 10px 0;
            text-align: right;
        }
    }
    
    /* Your existing styles with z-index adjustments */
    :root {
        --table-underline-offset: 1px;
        --table-underline-thickness: 1px;
        --table-line-height: 1.1;
    }
    
    table.dataTable {
        --underline-offset: var(--table-underline-offset);
        --underline-thickness: var(--table-underline-thickness);
        line-height: var(--table-line-height);
    }
    
    table.dataTable thead th {
        font-size: 90% !important;
    }
    
    table.dataTable tbody td {
        font-size: 90% !important;
    }
    
    table.dataTable.compact tbody td {
        padding-top: 5px !important;
        padding-bottom: 5px !important;
    }
    
    input[type="text"]::placeholder {
        font-style: italic;
        font-size: 80%;
    }
    
    .dataTables_wrapper .dataTables_info {
        font-weight: bold;
        margin-left: 0px !important;
        padding-top: 8px !important;
        clear: none !important;
    }
    
    .dataTables_wrapper .dt-buttons {
        float: left !important;
    }
    
    #top_info_display {
        float: none !important;
        text-align: right;
    }
    
    .selection-counter {
        color: #1f4eb6;
        font-weight: bold;
        font-size: 80%;
        float: right;
        margin-top: 8px;
        margin-right: 0px;
        padding: 5px 10px;
        background: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 4px;
        clear: right;
        text-align: right;
    }
    
    @media (max-width: 768px) {
        .selection-counter {
            float: right;
            display: block;
            margin: 10px 10px 10px 0;
            text-align: right;
        }
    }
    
    .top-controls-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
        margin-bottom: 10px;
    }
    
    .buttons-container {
        display: flex;
        align-items: center;
        gap: 5px;
        flex-wrap: wrap;
    }
    
    @media (max-width: 768px) {
        .top-controls-container {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
        }
    }
    
    .dataTables_wrapper .dt-layout-row.dt-layout-top .dt-layout-cell.dt-start {
        display: flex;
        align-items: center;
        flex-wrap: wrap;
        gap: 2px;
    }
    
    .custom-info-container {
        display: inline-flex;
        align-items: center;
        gap: 5px;
    }
    
    .custom-info-container .fa-solid {
        font-size: 1em;
        color: darkgreen;
    }
    
    .dataTables_wrapper .dt-buttons {
        display: inline-flex;
        gap: 5px;
    }
    
    /* Checkbox styles remain the same */
    table.dataTable tbody tr.selected td.select-checkbox::after {
        content: 'âœ“';
        font-size: 0.8rem;
        color: #333;
        font-weight: bold;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        line-height: 1;
        pointer-events: none;
    }
    
    table.dataTable.compact>tbody>tr.selected>td.select-checkbox:after, 
    table.dataTable.compact>tbody>tr.selected>th.select-checkbox:after{
        margin-top: -0.025rem;
        margin-left: -0.05rem;
    }
    
    table.dataTable td.select-checkbox::before {
        position: relative;
    }
    
    table.dataTable td.select-checkbox {
        text-align: center;
        vertical-align: middle;
        padding: 0.5rem;
        width: 3.5rem;
        min-width: 2.5rem;
        position: relative;
    }
    
    table.dataTable tbody tr.selected td.select-checkbox::before {
        background: #f0f8ff;
        border-color: #337ab7;
    }
    
    table.dataTable.compact>tbody>tr>td.select-checkbox:before,
    table.dataTable.compact>tbody>tr>th.select-checkbox:before {
        margin-top: -0.3rem;
    }
    
    @media (max-width: 768px) {
        table.dataTable td.select-checkbox {
            padding: 0.25rem;
            width: 2rem;
            min-width: 1.5rem;
        }
    
        table.dataTable td.select-checkbox::before {
            width: 0.8rem;
            height: 0.8rem;
        }
        
        table.dataTable.compact>tbody>tr>td.select-checkbox:before,
        table.dataTable.compact>tbody>tr>th.select-checkbox:before {
            margin-top: -0.4rem;
        }
    
        table.dataTable tbody tr.selected td.select-checkbox::after {
            font-size: 0.7rem;
        }
    }
    
    /* Additional mobile fix for very small screens */
    @media (max-width: 480px) {
        .selection-counter {
            float: left;
            display: block;
            text-align: left;
            margin: 0 0 5px 0 !important;
        }
         .dt-button-collection {
            z-index: 10000 !important;
            position: fixed !important;
            max-width: 90vw; /* Prevent it from being too wide */
        }
        
    /* Make individual buttons full width on very small screens */
        .buttons-container {
            flex-direction: column; !important;
            width: 100%; /* Take full width */
            gap: 5px;
        }
        
        .dt-buttons {
            width: 100% !important; /* Full width for button container */
            display: flex !important;
            flex-direction: column !important; /* Stack buttons vertically */
            gap: 5px;
        }
        
        .dt-button {
            width: 100% !important; /* Each button takes full width */
            box-sizing: border-box;
            white-space: nowrap !important;
        }
        
        table.dataTable td.select-checkbox {
            padding: 0.2rem;
            width: 1.5rem;
            min-width: 1.2rem;
        }
    
        table.dataTable td.select-checkbox::before {
            width: 0.5rem;
            height: 0.5rem;
        }
    
        table.dataTable tbody tr.selected td.select-checkbox::after {
            font-size: 0.6rem;
        }
        
        input[type="text"]::placeholder {
            font-size: 60% !important;
        }
    }
    
    .dataTables_filter {
        display: none !important;
    }

    /* Mobile-only fixes for responsive input */
    @media (max-width: 480px) {
        .mobile-tiny-input {
            font-size: 0.8rem !important;
            padding: 5px !important;
        }
    }
</style>

<table id="chimp-table" class="display nowrap cell-border compact" style="width:100%">
    <thead></thead>
    <tfoot></tfoot>
</table>

<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/responsive/2.5.0/js/dataTables.responsive.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.colVis.min.js"></script>
<script src="https://cdn.datatables.net/select/1.7.0/js/dataTables.select.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.copy.min.js"></script>

<script>
$(document).ready(function() {
    console.log('Starting DataTable initialization...');
    
    $.getJSON("../../JSON/chimp_gene_pair.json", function(data) {
        console.log('JSON data loaded successfully:', data.length, 'rows');
        
        const columns = [
  {
    "data": "Interaction_ID",
    "title": "<span title=\"Unique ConnectomeDB ID for each ligand\u2013receptor pair\">Interaction ID</span>"
  },
  {
    "data": "LR_Pair",
    "title": "<span title=\"Ligand-receptor Pair\">LR Pair</span>"
  },
  {
    "data": "Evidence",
    "title": "<span title=\"Direct: experimentally verified; Inferred: inferred from orthology\">Evidence</span>"
  },
  {
    "data": "AI_summary",
    "title": "<span title=\"Click the icon below to run Perplexity on the LR pair\">AI summary</span>"
  },
  {
    "data": "Ligand_Symbols",
    "title": "<span title=\"Official gene symbol (aliases, old names)\">Ligand Symbols</span>"
  },
  {
    "data": "Receptor_Symbols",
    "title": "<span title=\"Official gene symbol (aliases, old names)\">Receptor Symbols</span>"
  },
  {
    "data": "Ligand_XX_ID",
    "title": "Ligand XX ID"
  },
  {
    "data": "Receptor_XX_ID",
    "title": "Receptor XX ID"
  },
  {
    "data": "Ligand_ENSEMBL_ID",
    "title": "<span title=\"ENSEMBL gene ID for the ligand (link to ENSEMBL)\">Ligand ENSEMBL ID</span>"
  },
  {
    "data": "Receptor_ENSEMBL_ID",
    "title": "<span title=\"ENSEMBL gene ID for the receptor (link to ENSEMBL)\">Receptor ENSEMBL ID</span>"
  },
  {
    "data": "Human_Ligand_Symbols",
    "title": "Human Ligand Symbols"
  },
  {
    "data": "Human_Receptor_Symbols",
    "title": "Human Receptor Symbols"
  },
  {
    "data": "Ligand_Location",
    "title": "<span title=\"Location based on the predicted subcellular localization of the human proteome\">Ligand Location</span>"
  },
  {
    "data": "Receptor_Location",
    "title": "<span title=\"Location based on the predicted subcellular localization of the human proteome\">Receptor Location</span>"
  }
];
        console.log('Columns config:', columns);

        // Define searchable columns by their safe names
        const searchableColumns = [
            'Ligand_Symbols',
            'Receptor_Symbols',
            'Human_Ligand_Symbols', 
            'Human_Receptor_Symbols'
        ];
        
        console.log('Searchable columns:', searchableColumns);

        // Build header HTML - add checkbox column back
        var headerHtml = '<tr><th title="Tick boxes for rows to download via the CSV/Excel buttons">Select</th>';
        columns.forEach(function(col) {
            headerHtml += '<th>' + (col.title || col.data || '') + '</th>';
        });
        headerHtml += '</tr>';
        $('#chimp-table thead').html(headerHtml);

        // // Calculate hidden columns based on total column count (adjust for checkbox column)
        // var totalColumns = columns.length + 1; // +1 for checkbox column
        
        // // Only include valid positive column indices for hiding
        // var hiddenColumns = [11,12];

        // console.log('Total columns:', totalColumns);
        // console.log('Hidden columns:', hiddenColumns);
        // Find column indices by name
        var hiddenColumnNames = ["Ligand XX ID", "Receptor XX ID", 'Human_Ligand_Symbols', 'Human_Receptor_Symbols'];
        var hiddenColumns = [];
        columns.forEach(function(column, index) {
            if (hiddenColumnNames.includes(column.name) || hiddenColumnNames.includes(column.title) || hiddenColumnNames.includes(column.data)) {
                hiddenColumns.push(index + 1); // +1 to account for checkbox column
            }
        });

        console.log('Hidden columns by name:', hiddenColumns);

        var table = $('#chimp-table').DataTable({
            data: data,
            columns: [
                {
                    data: null,
                    defaultContent: '',
                    orderable: false,
                    className: 'select-checkbox',
                    width: '20px'
                }
            ].concat(columns), // Add checkbox column as first column
            scrollX: true,
            fixedHeader: false,
            fixedColumns: {
                start: 1,
            },
            autoWidth: true,
            responsive: false,
            dom: 'Bfrtip',
            searching: true,
            select: {
                style: 'multi',
                selector: 'td:first-child'
            },
            lengthMenu: [[15, 25, 50, 100, -1], ["15", "25", "50", "100", "All"]],
            buttons: [
                { extend: 'pageLength',
                  text: function(dt, button, config) {
                      return 'Show ' + dt.page.len() + ' Rows';
                  }
                },
                { extend: 'colvis', text: 'Display Columns' },
                { extend: 'selectAll', text: 'Select All',
                    action: function(e, dt, node, config) {
                        $.fn.dataTable.ext.buttons.selectAll.action.call(this, e, dt, node, config);
                        setTimeout(function() {
                            updateInfoDisplay();
                        }, 100);
                    }
                },
                { extend: 'selectNone', text: 'Deselect All',
                    action: function(e, dt, node, config) {
                        $.fn.dataTable.ext.buttons.selectNone.action.call(this, e, dt, node, config);
                        setTimeout(function() {
                            updateInfoDisplay();
                        }, 100);
                    }
                },
                {
                    extend: 'csvHtml5',
                    filename: 'ConnectomeDB2025_chimp',
                    exportOptions: {
                        columns: ':visible:not(:first-child)', // Export only visible columns, excluding checkbox
                        format: {
                            body: function(data, row, column, node) {
                                // Detect A.I. summary column by the chat bubble icon Perplexity instead of column position
                                if (data && data.toString().includes('Perplexity') && data.toString().includes('<a ') && data.toString().includes('href=')) {
                                    var $temp = $('<div>').html(data);
                                    var href = $temp.find('a').attr('href');
                                    return href ? encodeURI(href) : data;
                                }
                                // For all other columns, strip HTML tags
                                return data.replace ? data.replace(/<[^>]*>/g, '') : data;
                            }
                        }
                    },
                    action: function(e, dt, button, config) {
                        var selectedRows = dt.rows('.selected').count();
                        if (selectedRows > 0) {
                            config.exportOptions.modifier = { selected: true };
                        } else {
                            config.exportOptions.modifier = { page: 'all', search: 'none' };
                        }
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                    }
                },
                {
                    extend: 'excelHtml5',
                    filename: 'ConnectomeDB2025_chimp',
                    title: null,
                    exportOptions: {
                        columns: ':visible:not(:first-child)', // Export only visible columns, excluding checkbox
                        format: {
                            body: function(data, row, column, node) {
                                // Detect A.I. summary column by the chat bubble icon Perplexity instead of column position
                                if (data && data.toString().includes('Perplexity') && data.toString().includes('<a ') && data.toString().includes('href=')) {
                                    var $temp = $('<div>').html(data);
                                    var href = $temp.find('a').attr('href');
                                    return href ? encodeURI(href) : data;
                                }
                                // For all other columns, strip HTML tags
                                return data.replace ? data.replace(/<[^>]*>/g, '') : data;
                            }
                        }
                    },
                    action: function(e, dt, button, config) {
                        var selectedRows = dt.rows('.selected').count();
                        if (selectedRows > 0) {
                            config.exportOptions.modifier = { selected: true };
                        } else {
                            config.exportOptions.modifier = { page: 'all', search: 'none' };
                        }
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                    }
                }
            ],
            columnDefs: [
                {
                    orderable: false,
                    className: 'select-checkbox',
                    targets: 0
                },
                // Adjusted for checkbox column: Original column 10 is now at index 11
                { "className": "dt-center", "targets": [4] },
                // Adjusted for checkbox column: Original columns 5 and 6 are now at indices 5 and 6
                { "width": "275px", "targets": [5,6,11,12] },
                { "visible": false, "targets": hiddenColumns }
            ],
            initComplete: function () {
                console.log('DataTable initialization complete');
                var api = this.api();
                
                $('.dataTables_wrapper .dt-layout-row.dt-layout-top .dt-layout-cell.dt-end').append('<div class="dataTables_info" id="top_info_display"></div>');

                // Create separate selection counter
                $('.dt-buttons').after('<div class="selection-counter" id="selection_counter">0 rows selected</div>');

                // Update info display function
                window.updateInfoDisplay = function() {
                    var info = api.page.info();
                    var selectedCount = api.rows('.selected').count();
                    var filteredCount = api.rows({ search: 'applied' }).count();
                    var totalCount = api.rows().count();
            
                    var infoText = `Showing ${info.start + 1} to ${info.end} of ${filteredCount} entries`;
            
                    if (filteredCount !== totalCount) {
                        infoText += ` (filtered from ${totalCount} total entries)`;
                    }
            
                    if (selectedCount > 0) {
                        var selectedInFiltered = api.rows({ search: 'applied' }).nodes().to$().filter('.selected').length;
                        infoText += ` - ${selectedInFiltered} rows selected`;
                    }
            
                    $('#top_info_display_clone_2').html(infoText);
                    $('.dataTables_wrapper .dataTables_info').html(infoText);
                };

                // Selection counter update function
                window.updateSelectionCounter = function() {
                    var selectedCount = api.rows('.selected').count();
                    var filteredCount = api.rows({ search: 'applied' }).count();
                    var totalCount = api.rows().count();
                    
                    if (selectedCount > 0) {
                        var selectedInFiltered = api.rows({ search: 'applied' }).nodes().to$().filter('.selected').length;
                        $('#selection_counter').text(selectedInFiltered + ' rows selected');
                        $('#selection_counter').show();
                    } else {
                        $('#selection_counter').text('0 rows selected');
                    }
                };

                window.updateButtonText = function() {
                    var filteredCount = api.rows({ search: 'applied' }).count();
                    var totalCount = api.rows().count();
                    
                    if (filteredCount === totalCount) {
                        $('.buttons-select-all').text('Select All (' + totalCount + ')');
                    } else {
                        $('.buttons-select-all').text('Select All Filtered (' + filteredCount + ')');
                    }
                };

                // Add event listeners
                api.on('draw.dt select.dt deselect.dt', function() {
                    setTimeout(updateButtonText, 100);
                    setTimeout(updateInfoDisplay, 100);
                    setTimeout(updateSelectionCounter, 100);
                });

                updateInfoDisplay();
                updateSelectionCounter();

                // Add filter functionality
                setTimeout(function() {
                    // Create a filter container directly above the table and headers
                    var filterContainer = $('<div id="column-filters" style="background: white; padding-left: 0px; padding-right: 0px; padding-bottom: 10px; border: 0px solid #ddd; margin-bottom: 1px; width: 100%;"></div>');
                    $('#chimp-table').closest('.dataTables_wrapper').prepend(filterContainer);

                    // Append mobile style
                    $('head').append(`
                        <style>
                            @media (max-width: 480px) {
                                .mobile-tiny-input {
                                    font-size: 0.8rem !important;
                                    padding: 5px !important;
                                }
                            }
                        </style>
                    `);

                    var filterDiv = $('<div style="max-width: 100%;"></div>');
                    var label = $('<label></label>');

                    // Create input with dynamic placeholder
                    var input = $('<input type="text" placeholder="Search Ligand(s) / Receptor(s): i.e. ACE, CD24, EGFR, CEACAM5, NRXN3" />')
                        .css({
                            'width': '100%',
                            'padding': '8px',
                            'font-size': '1.1rem',
                            'border': '1px solid #ccc',
                            'border-radius': '4px'
                        })
                        .addClass('mobile-tiny-input')
                        .on('input keyup', function () {
                            var val = this.value;
                            console.log('Search input changed:', val);

                            // Remove any existing custom search
                            while($.fn.dataTable.ext.search.length > 0) {
                                $.fn.dataTable.ext.search.pop();
                            }

                            if (val === '') {
                                // If empty, don't add any custom search and reset ordering
                                api.order([]);
                                api.draw();
                            } else {
                                const searchTerms = val.split(',').map(term => term.trim().toLowerCase()).filter(term => term !== '');

                                if (searchTerms.length > 0) {
                                    // Use safe column names for searching
                                    $.fn.dataTable.ext.search.push(function(settings, data, dataIndex) {
                                        // Get the full row data object to access by safe column name
                                        var rowData = api.row(dataIndex).data();
                                        
                                        // Check each searchable column
                                        return searchTerms.some(term => {
                                            return searchableColumns.some(colName => {
                                                var colValue = rowData[colName] ? rowData[colName].toString().replace(/<[^>]*>/g, '').toLowerCase() : '';
                                                return colValue.includes(term);
                                            });
                                        });
                                    });

                                    api.draw();
                                } else {
                                    api.order([]);
                                    api.draw();
                                }
                            }
                        });

                    filterDiv.append(label).append(input);
                    filterContainer.append(filterDiv);
                }, 100);

                // Custom sort function using safe column names
                api.on('order.dt search.dt', function () {
                    var searchVal = $('#column-filters input[type="text"]').val();

                    if (searchVal && searchVal.trim() !== '') {
                        const searchTerms = searchVal
                            .split(',')
                            .map(term => term.trim().toLowerCase())
                            .filter(term => term !== '');
                            
                        if (searchTerms.length === 0) return;

                        // Get current order information from DataTables
                        var currentOrder = api.order();
                        var isCustomSearchActive = true;

                        // Check if user is trying to sort by a specific column
                        if (currentOrder.length > 0) {
                            var sortColumnIndex = currentOrder[0][0];
                            
                            // Get the column name for this index
                            var sortColumnName = '';
                            if (sortColumnIndex > 0 && sortColumnIndex <= columns.length) {
                                sortColumnName = columns[sortColumnIndex - 1].data; // -1 because of checkbox column
                            }
                            
                            // If sorting by a column other than our searchable columns, let DataTables handle it normally
                            if (searchableColumns.indexOf(sortColumnName) === -1) {
                                isCustomSearchActive = false;
                            }
                        }

                        if (isCustomSearchActive) {
                            api.rows().sort(function (rowIdxA, rowIdxB) {
                                let scoreA = 0;
                                let scoreB = 0;

                                const rowDataA = api.row(rowIdxA).data();
                                const rowDataB = api.row(rowIdxB).data();

                                const normalize = str =>
                                    str ? str.toString().replace(/<[^>]*>/g, '').toLowerCase().trim() : '';

                                // Get values from searchable columns using safe names
                                const valuesA = searchableColumns.map(colName => normalize(rowDataA[colName]));
                                const valuesB = searchableColumns.map(colName => normalize(rowDataB[colName]));

                                searchTerms.forEach(term => {
                                    valuesA.forEach(value => {
                                        if (value === term) scoreA -= 1000;
                                        else if (value.startsWith(term + ',')) scoreA -= 950;
                                        else if (value.startsWith(term + ' ')) scoreA -= 900;
                                        else if (value.includes('(' + term + ')')) scoreA -= 850;
                                        else if (value.includes(term + ' ()')) scoreA -= 800;
                                        else if (value.startsWith(term)) scoreA -= 700;
                                        else if (value.includes(term)) scoreA -= 100;
                                    });

                                    valuesB.forEach(value => {
                                        if (value === term) scoreB -= 1000;
                                        else if (value.startsWith(term + ',')) scoreB -= 950;
                                        else if (value.startsWith(term + ' ')) scoreB -= 900;
                                        else if (value.includes('(' + term + ')')) scoreB -= 850;
                                        else if (value.includes(term + ' ()')) scoreB -= 800;
                                        else if (value.startsWith(term)) scoreB -= 700;
                                        else if (value.includes(term)) scoreB -= 100;
                                    });
                                });

                                return scoreA - scoreB;
                            });
                        }
                    }
                });
            }
        });

        // Event listener for when the search input is cleared manually
        $(document).on('input', '#column-filters input[type="text"]', function() {
            if (this.value === '') {
                table.draw();
            }
        });

    }).fail(function(jqxhr, textStatus, error) {
        console.error("Failed to load JSON data:", textStatus, error);
        console.error("JSON path:", "../../JSON/chimp_gene_pair.json");
        alert("Failed to load table data. Please check the console for details.");
    });
});
</script>

</div>

<script>
(function() {
    function hideLoadingShowTablePage2() {
        document.getElementById('loading-widget-page2').style.display = 'none';
        document.getElementById('table-content2').style.opacity = '1';
    }
    
    // Make it globally available
    window.hideLoadingShowTablePage2 = hideLoadingShowTablePage2;
    
    // Fallback timeout
    setTimeout(function() {
        hideLoadingShowTablePage2();
    }, 2000);
})();
</script>


```