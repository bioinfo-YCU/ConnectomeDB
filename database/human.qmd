---
title: "Human \u2013 *Homo sapiens* </span>"
execute:
  echo: false
format:
  html:
    table: false
header-includes: <script src='../js/keepDropdownMenuGold.js'></script>
---

***

```{=html}
<!-- Injected automatically via Jinja -->
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
<link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.dataTables.min.css">
<link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.5.0/css/responsive.dataTables.min.css">
<link rel="stylesheet" href="https://cdn.datatables.net/select/1.7.0/css/select.dataTables.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<style>
    :root {
        --table-underline-offset: 1px;
        --table-underline-thickness: 1px;
        --table-line-height: 1.1;
    }

    /* Apply controlled underlines using CSS variables */
    table.dataTable {
        --underline-offset: var(--table-underline-offset);
        --underline-thickness: var(--table-underline-thickness);
        line-height: var(--table-line-height);
    }

    /* If you want to control header and body separately */
    table.dataTable thead th {
        font-size: 90% !important; /* Header font size */
    }
    
    table.dataTable tbody td {
        font-size: 90% !important; /* Body font size */
    }
    
    table.dataTable.compact tbody td {
    padding-top: 5px !important;
    padding-bottom: 5px !important;
    }


    /* italicized placeholder */
    input[type="text"]::placeholder {
        font-style: italic;
        font-size: 80%;
    }
    .dataTables_wrapper .dataTables_info {
        /* color: darkgreen; */
        font-weight: bold;
        margin-left: 0px !important;
        padding-top: 8px !important;
        font-size: 80%;
        clear: none !important;
    }
    
    .dataTables_wrapper .dt-buttons {
        float: left !important;
    }

    #top_info_display {
        float: none !important;
        text-align: right;
    }

    .selection-counter {
        color: #1f4eb6;
        font-weight: bold;
        font-size: 80%;
        float: right;
        margin-top: 8px;
        margin-right: 0px;
        padding: 5px 10px;
        background: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 4px;
        clear: right; /* ADD THIS */
        text-align: right; /* ADD THIS */
    }
    
    @media (max-width: 768px) {
        .selection-counter {
            float: right; /* CHANGED from 'none' to 'right' */
            display: block;
            margin: 10px 10px 10px 0; /* ADJUSTED margins */
            text-align: right; /* KEEP right alignment on mobile too */
        }
    }








        /* NEW: Add these styles after your existing CSS */
    .top-controls-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
        margin-bottom: 10px;
    }
    
    .buttons-container {
        display: flex;
        align-items: center;
        gap: 5px;
        flex-wrap: wrap;
    }
    
    /* .info-display-container {
        color: darkgreen;
        font-weight: bold;
        font-size: 80%;
        display: flex;
        align-items: center;
        gap: 5px;
        margin-left: auto;
        padding-left: 15px;
    }
     */
    /* Mobile responsive for new layout */
    @media (max-width: 768px) {
        .top-controls-container {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
        }
        
        .info-display-container {
            margin-left: 0;
            padding-left: 0;
        }
    }

        /* Target the container that holds both buttons and your new info */
    .dataTables_wrapper .dt-layout-row.dt-layout-top .dt-layout-cell.dt-start {
        display: flex; /* Make it a flex container */
        align-items: center; /* Vertically center items (buttons and info) */
        flex-wrap: wrap; /* Allow items to wrap to the next line if space is limited */
        gap: 10px; /* Add some space between the buttons and your info container */
    }
    
    /* Style for your custom info container */
    .custom-info-container {
        display: inline-flex; /* Keep this for internal icon+text alignment */
        align-items: center;
        gap: 5px; /* Space between icon and text */
        /* Remove any floats or absolute positioning here that might conflict */
    }
    
    /* Ensure the Font Awesome icon is styled correctly */
    .custom-info-container .fa-solid {
        font-size: 1em; /* Adjust as needed */
        color: darkgreen; /* Matches the text color */
    }
    
    /* Remove this if it's still present, as it contradicts flexbox */
    /* #top_info_display {
        float: none !important;
        text-align: right;
    } */
    
    /* Ensure buttons are not floating independently if they are within a flex container */
    .dataTables_wrapper .dt-buttons {
        /* float: left !important; <--- You might be able to remove this now if the parent flex handles it */
        /* Just ensure it's not set to 'block' which would break inline flow */
        display: inline-flex; /* Ensure buttons themselves are a flex row */
        gap: 5px; /* Space between buttons */
    }

    /* Base checkbox styling (the square box) */
    table.dataTable tbody tr.selected td.select-checkbox::after {
        content: '✓';
        font-size: 0.8rem; /* Keep this or adjust slightly if needed */
        color: #333;
        font-weight: bold;
        position: absolute;
        top: 50%; /* Start at 50% */
        left: 50%; /* Keep centered horizontally */
        transform: translate(-50%, -50%); /* Base centering */
        line-height: 1;
        pointer-events: none;
    }
    table.dataTable.compact>tbody>tr.selected>td.select-checkbox:after, table.dataTable.compact>tbody>tr.selected>th.select-checkbox:after{
        margin-top: -0.025rem;
        margin-left: -0.05rem;
    }
    /* Also, ensure your ::before has position: relative */
    table.dataTable td.select-checkbox::before {
        /* ... existing styles ... */
        position: relative; /* Make sure this is still here */
        /* ... existing styles ... */
    }
    /* Styling for the cell containing the checkbox */
    table.dataTable td.select-checkbox {
        text-align: center;
        vertical-align: middle;
        padding: 0.5rem;
        width: 3.5rem;
        min-width: 2.5rem;
        position: relative; /* Make sure the ::before element's relative positioning works within this */
    }
    /* Background for selected checkbox */
    table.dataTable tbody tr.selected td.select-checkbox::before {
        background: #f0f8ff; /* Light blue background for selected */
        border-color: #337ab7; /* Darker blue border for selected */
    }
    table.dataTable.compact>tbody>tr>td.select-checkbox:before,
    table.dataTable.compact>tbody>tr>th.select-checkbox:before {
        margin-top: -0.3rem;
    }
    /* Mobile responsive adjustments */
    @media (max-width: 768px) {
        table.dataTable td.select-checkbox {
            padding: 0.25rem;
            width: 2rem;
            min-width: 1.5rem;
        }

        table.dataTable td.select-checkbox::before {
            width: 0.8rem;
            height: 0.8rem;
        }

        table.dataTable tbody tr.selected td.select-checkbox::after {
            font-size: 0.7rem; /* Adjusted for smaller box */
        }
    }
    @media (max-width: 480px) {
        table.dataTable td.select-checkbox {
            padding: 0.2rem;
            width: 1.5rem;
            min-width: 1.2rem;
        }

        table.dataTable td.select-checkbox::before {
            width: 0.5rem;
            height: 0.5rem;
        }

        table.dataTable tbody tr.selected td.select-checkbox::after {
            font-size: 0.6rem; /* Adjusted for even smaller box */
        }
        input[type="text"]::placeholder {
            font-size: 60% !important;
        }
    }
    /* Hide the default search box */
    .dataTables_filter {
        display: none !important;
    }
</style>

<table id="human-table" class="display nowrap cell-border compact" style="width:100%">
    <thead></thead>
    <tfoot></tfoot>
</table>

<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/responsive/2.5.0/js/dataTables.responsive.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.colVis.min.js"></script>
<script src="https://cdn.datatables.net/select/1.7.0/js/dataTables.select.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>

<script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.copy.min.js"></script>


<script>

$.getJSON("../JSON/human_gene_pair.json", function(data) {

    const columns = [
  {
    "data": "Interaction ID",
    "title": "<span title=\"Double-click header of Interaction ID to reverse sort\">Interaction ID&nbsp;</span>"
  },
  {
    "data": "LR Pair Card",
    "title": "<span title=\"Double-click header of LR Pair Card to reverse sort\">LR Pair Card&nbsp;</span>"
  },
  {
    "data": "Human LR Pair",
    "title": "<span title=\"Ligand-Receptor Interacting Pair, as described in Liu et al. (PMID: XXXXXX)\">Human LR Pair</span>"
  },
  {
    "data": "Ligand",
    "title": "<span title=\"Official Gene Symbol; Hover on symbols below to show gene names\">Ligand&nbsp;&nbsp;&nbsp;</span>"
  },
  {
    "data": "Receptor",
    "title": "<span title=\"Official Gene Symbol; Hover on symbols below to show gene names\">Receptor&nbsp;&nbsp;&nbsp;</span>"
  },
  {
    "data": "Ligand Symbols",
    "title": "<span title=\"Double-click header of Ligand Symbols to reverse sort\">Ligand Symbols&nbsp;</span>"
  },
  {
    "data": "Receptor Symbols",
    "title": "<span title=\"Double-click header of Receptor Symbols to reverse sort\">Receptor Symbols&nbsp;</span>"
  },
  {
    "data": "Ligand Location",
    "title": "<span title=\"Location based on the predicted subcellular localization of the human proteome\">Ligand Location</span>"
  },
  {
    "data": "Receptor Location",
    "title": "<span title=\"Location based on the predicted subcellular localization of the human proteome\">Receptor Location</span>"
  },
  {
    "data": "Ligand HGNC ID",
    "title": "<span title=\"HUGO Gene Nomenclature Committee (HGNC) ID. Click on the link for more details\">Ligand HGNC ID&nbsp;&nbsp;</span>"
  },
  {
    "data": "Receptor HGNC ID",
    "title": "<span title=\"HUGO Gene Nomenclature Committee (HGNC) ID. Click on the link for more details\">Receptor HGNC ID&nbsp;&nbsp;</span>"
  },
  {
    "data": "Perplexity",
    "title": "<span title=\"Click the logo below to run Perplexity on the Human LR pair\">Perplexity&nbsp;</span>"
  },
  {
    "data": "Human evidence",
    "title": "<span title=\"Double-click header of Human evidence to reverse sort\">Human evidence&nbsp;</span>"
  }
];



    // Build header HTML - add checkbox column back

    // Set the header for the first column to 'Copy' with a tooltip

    var headerHtml = '<tr><th title="Tick the boxes of the rows you would like to download via the buttons above">Select</th>';

    columns.forEach(function(col) {

        headerHtml += '<th>' + (col.title || col.data || '') + '</th>';

    });

    headerHtml += '</tr>';

    $('#human-table thead').html(headerHtml);



    // Calculate hidden columns based on total column count (adjust for checkbox column)

    var totalColumns = columns.length + 1; // +1 for checkbox column

    // The original columns 4 and 5 (indices 3 and 4 in the `columns` array)

    // become indices 4 and 5 after the checkbox column is prepended.

    var hiddenColumns = [4, 5]; // Hide original columns 3 and 4



    // // NO NEED for now --- Add last 5 columns to hidden list (adjust this number as needed)

    // // Remember to adjust for the prepended checkbox column

    // for (var i = 5; i > 0; i--) {

    //     if (totalColumns - i >= 0) {

    //         hiddenColumns.push(totalColumns - i);

    //     }

    // }



    // Remove duplicates

    hiddenColumns = [...new Set(hiddenColumns)];



    console.log('Total columns:', totalColumns);

    console.log('Hidden columns:', hiddenColumns);



    var table = $('#human-table').DataTable({

        data: data,

        columns: [

            {

                data: null,

                defaultContent: '',

                orderable: false,

                className: 'select-checkbox',

                width: '20px'

            }

        ].concat(columns), // Add checkbox column as first column

        scrollX: true,

        fixedHeader: false,

        fixedColumns: {

            start: 1,

        },

        autoWidth: true,

        responsive: false,

        dom: 'Bfrtip',

        searching: true,

        select: {

            style: 'multi',

            selector: 'td:first-child',
            
            info: false //to remove flashing of XX rows selected

        },

        lengthMenu: [[15, 25, 50, 100, -1], ["15", "25", "50", "100", "All"]],

        buttons: [

            'pageLength',

            { extend: 'colvis', text: 'Display Columns' },

            { extend: 'selectAll', text: 'Select All',
            action: function(e, dt, node, config) {
                $.fn.dataTable.ext.buttons.selectAll.action.call(this, e, dt, node, config);
                setTimeout(function() {
                    updateInfoDisplay();
                }, 100);
            }
        },

            { extend: 'selectNone', text: 'Deselect All',
        action: function(e, dt, node, config) {
            $.fn.dataTable.ext.buttons.selectNone.action.call(this, e, dt, node, config);
            setTimeout(function() {
                updateInfoDisplay();
            }, 100);
        }
    },

            {

                extend: 'csvHtml5',

                filename: 'ConnectomeDB2025_human',

                exportOptions: {

                    columns: ':visible:not(:first-child)', // Export only visible columns, excluding checkbox

                    format: {

                        body: function(data, row, column, node) {

                            // Check if this cell contains the &#128269; (🔍) symbol AND a link (Perplexity column detection)
                            if (data && data.toString().includes('&#128269;') && data.toString().includes('<a ') && data.toString().includes('href=')) {

                                var $temp = $('<div>').html(data);

                                var href = $temp.find('a').attr('href');

                                return href ? encodeURI(href) : data;

                            }

                            // For all other columns, strip HTML tags

                            return data.replace ? data.replace(/<[^>]*>/g, '') : data;

                        }

                    }

                },

                action: function(e, dt, button, config) {

                    var selectedRows = dt.rows('.selected').count();

                    if (selectedRows > 0) {

                        config.exportOptions.modifier = { selected: true };

                    } else {

                        config.exportOptions.modifier = { page: 'all', search: 'none' };

                    }

                    $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);

                }

            },

            {

                extend: 'excelHtml5',

                filename: 'ConnectomeDB2025_human',

                title: null,

                exportOptions: {

                    columns: ':visible:not(:first-child)', // Export only visible columns, excluding checkbox

                    format: {

                        body: function(data, row, column, node) {

                            // Check if this cell contains the &#128269; (🔍) symbol AND a link (Perplexity column detection)
                            if (data && data.toString().includes('&#128269;') && data.toString().includes('<a ') && data.toString().includes('href=')) {

                                var $temp = $('<div>').html(data);

                                var href = $temp.find('a').attr('href');

                                return href ? encodeURI(href) : data;

                            }

                            return data.replace ? data.replace(/<[^>]*>/g, '') : data;

                        }

                    }

                },

                action: function(e, dt, button, config) {

                    var selectedRows = dt.rows('.selected').count();

                    if (selectedRows > 0) {

                        config.exportOptions.modifier = { selected: true };

                    } else {

                        config.exportOptions.modifier = { page: 'all', search: 'none' };

                    }

                    $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);

                }

            },

            // {

            //     extend: 'copyHtml5',

            //     filename: 'ConnectomeDB2025_human',

            //     title: null,

            //     exportOptions: {

            //         columns: ':visible:not(:first-child)', // Export only visible columns, excluding checkbox

            //         format: {

            //             body: function(data, row, column, node) {

            //                 // Check if this cell contains the &#128269; (🔍) symbol AND a link (Perplexity column detection)
            //                 if (data && data.toString().includes('&#128269;') && data.toString().includes('<a ') && data.toString().includes('href=')) {

            //                     var $temp = $('<div>').html(data);

            //                     var href = $temp.find('a').attr('href');

            //                     return href ? encodeURI(href) : data;

            //                 }

            //                 return data.replace ? data.replace(/<[^>]*>/g, '') : data;

            //             }

            //         }

            //     },

            //     action: function(e, dt, button, config) {

            //         var selectedRows = dt.rows('.selected').count();

            //         if (selectedRows > 0) {

            //             config.exportOptions.modifier = { selected: true };

            //         } else {

            //             config.exportOptions.modifier = { page: 'all', search: 'none' };

            //         }

            //         $.fn.dataTable.ext.buttons.copyHtml5.action.call(this, e, dt, button, config);

            //     }

            // }

        ],

        columnDefs: [

            {

                orderable: false,

                className: 'select-checkbox',

                targets: 0

            },

            // Adjusted for checkbox column: Original column 11 is index 12

            { "className": "dt-center", "targets": [12] },

            // Adjusted for checkbox column: Original columns 5 and 6 are now at indices 5 and 6

            { "width": "275px", "targets": [5, 6] },

            { "visible": false, "targets": hiddenColumns }

        ],

        initComplete: function () {

            var api = this.api();

            $('.dataTables_wrapper .dt-layout-row.dt-layout-top .dt-layout-cell.dt-end').append('<div class="dataTables_info" id="top_info_display"></div>');

             // ADD THIS LINE: Create separate selection counter
            $('.dt-buttons').after('<div class="selection-counter" id="selection_counter">0 rows selected</div>');
        
            // --- Adjust your updateInfoDisplay function ---
            window.updateInfoDisplay = function() {
                var info = api.page.info();
                var selectedCount = api.rows('.selected').count();
                var filteredCount = api.rows({ search: 'applied' }).count();
                var totalCount = api.rows().count();
        
                var infoText = `Showing ${info.start + 1} to ${info.end} of ${filteredCount} entries`;
        
                if (filteredCount !== totalCount) {
                    infoText += ` (filtered from ${totalCount} total entries)`;
                }
        
                if (selectedCount > 0) {
                    var selectedInFiltered = api.rows({ search: 'applied' }).nodes().to$().filter('.selected').length;
                    infoText += ` - ${selectedInFiltered} rows selected`;
                }
        
                // Update BOTH the original (bottom) and the cloned (top) info elements
                // Make sure to update the one with the new ID for the top display
                $('#top_info_display_clone_2').html(infoText); // Update the cloned one
                $('.dataTables_wrapper .dataTables_info').html(infoText); // This will update the original bottom one
            };

            // ADD THIS: Simple counter update function
                window.updateSelectionCounter = function() {
                    var selectedCount = api.rows('.selected').count();
                    var filteredCount = api.rows({ search: 'applied' }).count();
                    var totalCount = api.rows().count();
                    
                    if (selectedCount > 0) {
                        var selectedInFiltered = api.rows({ search: 'applied' }).nodes().to$().filter('.selected').length;
                        $('#selection_counter').text(selectedInFiltered + ' rows selected');
                        $('#selection_counter').show();
                    } else {
                        $('#selection_counter').text('0 rows selected');
                    }
                };

            
            window.updateButtonText = function() {
                var filteredCount = api.rows({ search: 'applied' }).count();
                var totalCount = api.rows().count();
                
                if (filteredCount === totalCount) {
                    $('.buttons-select-all').text('Select All (' + totalCount + ')');
                } else {
                    $('.buttons-select-all').text('Select All Filtered (' + filteredCount + ')');
                }
            };

            // Add this event listener
            api.on('draw.dt select.dt deselect.dt', function() {
                setTimeout(updateButtonText, 100);
                setTimeout(updateInfoDisplay, 100);
                setTimeout(updateSelectionCounter, 100); // ADD THIS LINE
            });

            updateInfoDisplay(); // Call it once after setup
            updateSelectionCounter(); // ADD THIS LINE

            // Wait for DOM to be ready, then add filter

            setTimeout(function() {

                // Create a filter container directly above the table and headers

                var filterContainer = $('<div id="column-filters" style="background: white; padding-left: 0px; padding-right: 0px; padding-bottom: 10px; border: 0px solid #ddd; margin-bottom: 1px; width: 100%;"><h4 style="margin: 0 0 15px 0;">Search Ligand(s) / Receptor(s) here</h4></div>');

                $('#human-table').closest('.dataTables_wrapper').prepend(filterContainer);



                // Append a style block with media query for smaller screens

                $('head').append(`

                    <style>

                        @media (max-width: 480px) { /* Adjust breakpoint as needed for "mobile" */

                            .mobile-tiny-input { /* Add a class to your input for targeting */

                                font-size: 0.8rem !important; /* Make font smaller */

                                padding: 5px !important;       /* Reduce padding */

                            }

                        }

                    </style>

                `);



                var filterDiv = $('<div style="max-width: 100%;"></div>');

                var label = $('<label></label>');



                // Create input without datalist (no autofill)

                var input = $('<input type="text" placeholder="i.e. CD24, EGFR, A2M" />') // Updated placeholder

                    .css({

                        'width': '100%',

                        'padding': '8px',

                        'font-size': '1rem',

                        'border': '1px solid #ccc',

                        'border-radius': '4px'

                    })

                    .addClass('mobile-tiny-input') // Add the class for mobile styling

                    .on('input keyup', function () {

                        var val = this.value;



                        // Remove any existing custom search

                        while($.fn.dataTable.ext.search.length > 0) {

                            $.fn.dataTable.ext.search.pop();

                        }



                        if (val === '') {

                            // If empty, don't add any custom search and reset ordering

                            api.order([]); // Remove custom ordering

                            api.draw();

                        } else {

                            const searchTerms = val.split(',').map(term => term.trim().toLowerCase()).filter(term => term !== '');



                            if (searchTerms.length > 0) {

                                // Add custom search function for original columns 5 (DataTables index 5) and 6 (DataTables index 6)

                                $.fn.dataTable.ext.search.push(function(settings, data, dataIndex) {

                                    // In $.fn.dataTable.ext.search, 'data' array

                                    // contains values for ALL columns including the prepended checkbox column.

                                    // So, original column 6 is at data[6] and original column 7 is at data[7].

                                    var col6Value = data[6] ? data[6].toString().replace(/<[^>]*>/g, '').toLowerCase() : ''; // Original column 6

                                    var col7Value = data[7] ? data[7].toString().replace(/<[^>]*>/g, '').toLowerCase() : ''; // Original column 7

                                    console.log("Searching for:", searchTerms);

                                    console.log("Column 6 value:", col6Value);

                                    console.log("Column 7 value:", col7Value); // <<< ADD THIS LINE



                                    return searchTerms.some(term =>

                                        col6Value.includes(term) || col7Value.includes(term)

                                    );

                                });



                                // After filtering, apply the custom sort.

                                // We'll force a redraw which will trigger the 'order.dt' event and our custom sort.

                                api.draw();

                            } else {

                                api.order([]); // Remove custom ordering if no valid search terms

                                api.draw();

                            }

                        }

                    });



                filterDiv.append(label).append(input);

                filterContainer.append(filterDiv);

            }, 100);
        } 
    });


            // Custom sort function to prioritize search results based on the active search input

            // Replace your existing custom sort function with this updated version
api.on('order.dt search.dt', function () {
    var searchVal = $('#column-filters input[type="text"]').val();

    if (searchVal && searchVal.trim() !== '') {
        const searchTerms = searchVal
            .split(',')
            .map(term => term.trim().toLowerCase())
            .filter(term => term !== '');

        if (searchTerms.length === 0) return;

        // Get current order information from DataTables
        var currentOrder = api.order();
        var isCustomSearchActive = true;

        // Check if user is trying to sort by a specific column
        if (currentOrder.length > 0) {
            var sortColumnIndex = currentOrder[0][0];
            var sortDirection = currentOrder[0][1]; // 'asc' or 'desc'
            
            // If sorting by a column other than our search columns (6 or 7), 
            // let DataTables handle it normally
            if (sortColumnIndex !== 6 && sortColumnIndex !== 7) {
                isCustomSearchActive = false;
            }
        }

        if (isCustomSearchActive) {
            api.rows().sort(function (rowIdxA, rowIdxB) {
                let scoreA = 0;
                let scoreB = 0;

                const rowDataA = api.row(rowIdxA).data();
                const rowDataB = api.row(rowIdxB).data();

                const normalize = str =>
                    str ? str.toString().replace(/<[^>]*>/g, '').toLowerCase().trim() : '';

                const valuesA = [normalize(rowDataA[6]), normalize(rowDataA[7])];
                const valuesB = [normalize(rowDataB[6]), normalize(rowDataB[7])];

                searchTerms.forEach(term => {
                    valuesA.forEach(value => {
                        if (value === term) scoreA -= 1000;
                        else if (value.startsWith(term + ',')) scoreA -= 950;
                        else if (value.startsWith(term + ' ')) scoreA -= 900;
                        else if (value.includes('(' + term + ')')) scoreA -= 850;
                        else if (value.includes(term + ' ()')) scoreA -= 800;
                        else if (value.startsWith(term)) scoreA -= 700;
                        else if (value.includes(term)) scoreA -= 100;
                    });

                    valuesB.forEach(value => {
                        if (value === term) scoreB -= 1000;
                        else if (value.startsWith(term + ',')) scoreB -= 950;
                        else if (value.startsWith(term + ' ')) scoreB -= 900;
                        else if (value.includes('(' + term + ')')) scoreB -= 850;
                        else if (value.includes(term + ' ()')) scoreB -= 800;
                        else if (value.startsWith(term)) scoreB -= 700;
                        else if (value.includes(term)) scoreB -= 100;
                    });
                });

                return scoreA - scoreB;
            });
        }
    } else {
        // When no search is active, let DataTables handle sorting normally
        // Don't override with custom sorting
    }
});



    // Event listener for when the search input is cleared manually

    $('#column-filters input[type="text"]').on('input', function() {

        if (this.value === '') {

            // When cleared, the 'search.dt' event handler above will reset the order

            table.draw();

        }

    });

});

</script>
```

{{< include hint.qmd >}}



