---
title: "{{< fa database >}} ConnectomeDB2025: <span class='highlight'>Human LR Pairs Ë£ Pubmed Evidence</span>"
execute:
  echo: false
  warnings: false
format:
  html:
    table: false
header-includes: |
  <script src="../js/keepDropdownMenuGold.js"></script>
  <script>
      document.addEventListener("DOMContentLoaded", function () {
        const columnNames = [
          "Interaction ID", "Human LR Pair","Perplexity", "Database Source", "PMID", "Year", "Journal", "Title", "Ligand Aliases", "Receptor Aliases", "Species"
        ];
    
        // Add labels and placeholders to column filters
        const headers = document.querySelectorAll("thead th");
        headers.forEach((th, i) => {
          const input = th.querySelector("input");
          if (input) {
            input.setAttribute("placeholder", "Filter");
            if (!th.querySelector(".filter-label")) {
              const label = document.createElement("div");
              label.className = "filter-label";
              label.textContent = columnNames[i] || `Column ${i + 1}`;
              label.style.fontWeight = "bold";
              label.style.fontSize = "0.85em";
              label.style.marginBottom = "2px";
              input.parentNode.insertBefore(label, input);
            }
          }
        });
    
        // Observe click events to fix empty column visibility dropdown labels
        document.addEventListener("click", function () {
          const intervalId = setInterval(() => {
            const buttons = document.querySelectorAll(".dt-button-collection button.dt-button");
            if (buttons.length > 0) {
              buttons.forEach((btn, idx) => {
                if (btn.textContent.trim() === "") {
                  const span = btn.querySelector("span");
                  if (span) {
                    span.textContent = columnNames[idx] || `Column ${idx + 1}`;
                  }
                }
              });
              clearInterval(intervalId);
            }
          }, 100);
          setTimeout(() => clearInterval(intervalId), 3000);
        });
      });
  </script>
---

***

```{=html}
<style>
/* Target the first search pane */
.dtsp-searchPane:first-child::before {
    content: "Ligand Official Symbol & Aliases";
    font-weight: bold;
}

/* Target the sixth search pane */
.dtsp-searchPane:nth-child(2)::before {
    content: "Receptor Official Symbol & Aliases";
    font-weight: bold;
}

/* Target the seventh search pane */
.dtsp-searchPane:nth-child(3)::before {
    content: "Species";
    font-weight: bold;
}

</style>

```



```{python}

import sys
import os
import time
import pandas as pd
import warnings
warnings.filterwarnings("ignore", category=pd.errors.DtypeWarning)
from itables import init_notebook_mode, show
from IPython.display import display, Javascript
import itables.options as opt
# Change working directory to ConnectomeDB
project_root = os.path.dirname(os.getcwd())
os.chdir(project_root)
sys.path.append(os.path.abspath("src"))

from createTriplicateDT import gene_pair_trip

human_gene_pairTrip = gene_pair_trip.iloc[:, :11]

# Function to update and display the table
def update_table1():
    show(
        human_gene_pairTrip,
        keys=True,
        layout={"topStart": "info", "topEnd": "paging",
                "bottomStart": "buttons", "bottomEnd": "search"},
        searchPanes={"layout": "rows-1", 
                     "cascadePanes": True, 
                     "columns": [8,9,10], 
                     "regex": True, "caseInsensitive": False, 
                     "smart": True, 
                     "initCollapsed": True, 
                     "controls": True},
        #layout={"bottom": "searchBuilder", "title": "Advanced Search"},
        fixedColumns={"start": 2, "end": 0},
        #fixedHeader=True,  # Keep header fixed for alignment
        column_filters="header", 
        scrollX=True,
        classes="display nowrap cell-border compact",
        select=True,
        selected_rows=[],
        responsive=True,  # Enable responsive behavior
        theme='grid',
        search={"regex": True, "caseInsensitive": True, "smart": True},
        lengthMenu=[ [10, 20, 50, 100, -1], ["10", "20", "50", "100", "All"] ],
        buttons=[
            "pageLength",  
            {"extend": "colvis", "text": "Display Columns"},
            {"extend": "csvHtml5", "title": "Source"},
            {"extend": "excelHtml5", "title": "Source"},
            {"extend": "copyHtml5", "title": "Source"},
        ],
        columnDefs=[
            {"className": "dt-center", "targets": [2]}, 
            {"width": "800px", "targets": [7]},
            # {"targets": [8,9], "visible": False} # Hide last 2 columns by default
        ],
        style="1200px;margin:auto",
           language={
            "search": "Search Any Column:",
            "searchPlaceholder": "e.g. CD80",
            "searchPanesPlaceholder": "",
           # "searchBuilder": {
           #     "title": "Advanced Search <i>Multiple filtering, AND/OR condition</i>" 
           #
        }, 
        autoWidth=True,
        maxBytes=0,  # So it does not downsample
        initCode='''
            $(document).on('draw.dt', function () {
                $($.fn.dataTable.tables(true)).DataTable().columns.adjust();
            });
        ''',
    )
      
      

# Call the function to render the table
update_table1()

```



{{< include hint.qmd >}}
