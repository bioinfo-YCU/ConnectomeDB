---
title: "ConnectomeDB Stats"
execute:
  echo: false
  warnings: false  # Add this line to suppress warnings globally
toc: false
---

## The Charts below are Interactive. Unselect the categories you are not interested and watch the charts change!

::: {.columns}

::: {.column width="50%"}

### Based on the [**Human LR pairs Database**](database/human.qmd)

::: {.panel-tabset}

```{python}
#| echo: false
import sys
import os
import re
import pandas as pd
import plotly.express as px
sys.path.append(os.path.abspath("src"))
from createDataTable import gene_pair
from createTriplicateDT import gene_pair_trip
from createFunctionalAnnotTable import gene_pair_disease, gene_pair_pathway

# Subset categorical columns
gene_pair_cat = gene_pair.iloc[:, [2, 7, 8, 9, 10, 13, 14]]
cat_cols = gene_pair_cat.select_dtypes(include='object').columns

figs = []

for col in cat_cols:
    # Clean values: remove HTML tags
    cleaned_values = gene_pair_cat[col].astype(str).apply(lambda x: re.sub(r'<.*?>', '', x))
    # Replace commas with newlines in a display-safe version of the values
    cleaned_values = cleaned_values.apply(lambda x: x.replace('secreted by ischemic cardiomyocytes, secreted by necrotic cells', 'secreted by ischemic cardiomyocytes & necrotic cells'))
    cleaned_values = cleaned_values.apply(lambda x: x.replace('Endoplasmic reticulum', 'ER'))
    counts = cleaned_values.value_counts().reset_index()
    counts.columns = [col, 'count']
    cat_count = str(cleaned_values.nunique())
    fig = px.pie(
        counts,
        names=col,
        values='count',
        hole=0.4,
        title=f"Distribution of {cat_count} {col}"
    )
    fig.update_traces(textinfo='percent+label', textposition='inside')
    fig.update_layout(
    legend_title_text=col,
    legend=dict(
        orientation="v",
        y=0.5,
        yanchor="middle",
        x=1.05,
        xanchor="left"
    ),
    width=600,
    height=600
)
   
    figs.append(fig)

```

## Binding Location

```{python}
#| echo: false
figs[1]
```

## Bind in Trans

```{python}
#| echo: false
figs[2]
```

## Bidirectional

```{python}
#| echo: false
figs[3]
```

## Interaction Type

```{python}
#| echo: false
figs[4]
```


## Ligand Location

```{python}
#| echo: false
figs[5]
```


## Receptor Location

```{python}
#| echo: false
figs[6]
```

:::

:::

::: {.column width="50%"}

### Based on the [**Human LR Pair Ë£ Pubmed Evidence**](database/human-trip.qmd)

::: {.panel-tabset}

## PMID count by Year 

```{python}
#| echo: false
# Select categorical columns
gene_pair_trip_cat = gene_pair_trip.iloc[:, [3,6,10]]
cat_cols_trip = gene_pair_trip_cat.select_dtypes(include='object').columns

year_col = gene_pair_trip['Year']

# Convert datetime64 to int nanoseconds since epoch
ns_int = year_col.astype('int64')

# Extract last 5 digits (to get a usable year approximation)
years = ns_int % (10**5)

# Count frequencies by year
year_counts = pd.Series(years).value_counts().sort_index().reset_index()
year_counts.columns = ['Year', 'Count']

```

```{python}
#| echo: false
# Create bar plot
fig = px.bar(
    year_counts,
    x='Year',
    y='Count',
    title='PMID counts per Year',
    labels={'Year': 'Year', 'Count': 'Count'},
    template='plotly_white'
)
fig.update_layout(xaxis_tickangle=-45, width=600, height=600)



```

```{python}
#| echo: false

figs_trip = []
for col in cat_cols_trip:
    # Clean values: remove HTML tags
    cleaned_values = gene_pair_trip_cat[col].astype(str).apply(lambda x: re.sub(r'<.*?>', '', x))

    counts = cleaned_values.value_counts().reset_index()
    counts.columns = [col, 'count']
    cat_count = str(cleaned_values.nunique())

    fig_trip = px.pie(
        counts,
        names=col,
        values='count',
        hole=0.4,
        title=f"Distribution of {cat_count} {col}"
    )
    fig_trip.update_traces(textinfo='percent+label', textposition='inside')
    fig_trip.update_layout(
    legend_title_text=col,
    legend=dict(
        orientation="v",
        y=0.5,
        yanchor="middle",
        x=1.05,
        xanchor="left"
    ),
    width=600,
    height=600
)
    figs_trip.append(fig_trip)

```

## Database Source

```{python}
#| echo: false
figs_trip[0]

```


## Journal

```{python}
#| echo: false
figs_trip[1]
```

## Species

```{python}
#| echo: false
figs_trip[2]
```


## Temp1

```{python}
#| echo: false
figs_trip[2]
```

## Temp2

```{python}
#| echo: false
figs_trip[2]
```

## Temp3

```{python}
#| echo: false
figs_trip[2]
```
:::

:::

:::



::: {.columns}

::: {.column width="100%"}

### Based on the [**Disease Annotations**](annotations/disease.qmd)

::: {.panel-tabset}

```{python}
#| echo: false

# Subset categorical columns
disease_cat = gene_pair_disease.iloc[:, [2, 3, 4]]
cat_cols = disease_cat.select_dtypes(include='object').columns

figs_disease = []

for col in cat_cols:
    # Clean values: remove HTML tags
    cleaned_values = disease_cat[col].astype(str).apply(lambda x: re.sub(r'<.*?>', '', x))

    counts = cleaned_values.value_counts().reset_index()
    counts.columns = [col, 'count']
    cat_count = str(cleaned_values.nunique())
    fig_disease = px.pie(
        counts,
        names=col,
        values='count',
        hole=0.4,
        title=f"Distribution of {cat_count} {col}"
    )
    fig_disease.update_traces(textinfo='percent+label', textposition='inside')
    fig_disease.update_layout(
    legend_title_text=col,
    legend=dict(
        orientation="v",
        y=0.5,
        yanchor="middle",
        x=1.05,
        xanchor="left"
    ),
    width=1200,
    height=600
)
    figs_disease.append(fig_disease)

```

## Specific Disease

```{python}

#| echo: false
figs_disease[0]

```

## Disease Type

```{python}

#| echo: false
figs_disease[1]

```

## Cancer-related

```{python}

#| echo: false
figs_disease[2]

```


:::

:::

::: {.column width="100%"}

### Based on the [**Pathway Annotations**](annotations/pathway.qmd)

::: {.panel-tabset}

```{python}
#| echo: false
# Select categorical columns
cat_pathways = gene_pair_pathway.iloc[:, [3,4,5]]
cat_cols_trip = cat_pathways.select_dtypes(include='object').columns

figs_pathway = []
for col in cat_cols_trip:
    # Clean values: remove HTML tags
    cleaned_values = cat_pathways[col].astype(str).apply(lambda x: re.sub(r'<.*?>', '', x))

    counts = cleaned_values.value_counts().reset_index()
    counts.columns = [col, 'count']
    cat_count = str(cleaned_values.nunique())

    fig_pathway = px.pie(
        counts,
        names=col,
        values='count',
        hole=0.4,
        title=f"Distribution of {cat_count} {col}"
    )
    fig_pathway.update_traces(textinfo='percent+label', textposition='inside')
    fig_pathway.update_layout(
    legend_title_text=col,
    legend=dict(
        orientation="v",
        y=0.5,
        yanchor="middle",
        x=1.05,
        xanchor="left"
    ),
    width=1200,
    height=600
)
    figs_pathway.append(fig_pathway)

```

## KEGG Pathway

```{python}
#| echo: false
figs_pathway[0]

```

## KEGG relationship

```{python}
#| echo: false
figs_pathway[1]

```

## PROGENy Pathway

```{python}
#| echo: false
figs_pathway[2]

```
:::

:::

:::

