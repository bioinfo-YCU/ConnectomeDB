---
title: "Downloads"
---

```{python}
#| echo: false
#| output: asis

import os
import json
from pathlib import Path
from datetime import datetime
import humanize

def load_config():
    """Load repository configuration"""
    config_file = Path("JSON/config.json")
    if config_file.exists():
        with open(config_file, 'r') as f:
            return json.load(f)
    return {
        "title": "ConnectomeDB Data Repository",
        "description": "Browse and download Ligand-receptor database tables across 14 most studied species.",
        "license": "MIT License",
        "contact":  "mailto:&#104;&#101;&#108;&#112;&#64;&#99;&#111;&#110;&#110;&#101;&#99;&#116;&#111;&#109;&#101;&#100;&#98;&#46;&#111;&#114;&#103;,&#97;&#108;&#105;&#115;&#116;&#97;&#105;&#114;&#46;&#102;&#111;&#114;&#114;&#101;&#115;&#116;&#64;&#112;&#101;&#114;&#107;&#105;&#110;&#115;&#46;&#117;&#119;&#97;&#46;&#101;&#100;&#117;&#46;&#97;&#117;",
        "citation": "[ConnectomeDB2025, a high quality manually curated ligand-receptor database for cell-to-cell communication prediction](), P Liu, S Maezono et al. *Journal Title* **XX (YY)**, ZZZ (2025). DOI: 10.xxxx/xxxxx"
    }

def is_visible(p):
    """Check if a path is visible (not hidden). Only checks the immediate filename/dirname."""
    return not p.name.startswith('.')

def is_data_file(file_path):
    """Check if a file is likely a data file we want to track for modification dates"""
    data_extensions = {'.csv', '.xlsx', '.xls', '.json', '.tsv', '.txt'}
    excluded_patterns = {
        'index.qmd', 'index.html', 'readme', 'license', 'config.json',
        '.DS_Store', 'thumbs.db', 'desktop.ini', '.gitignore', '.gitkeep'
    }
    
    # Check extension
    if file_path.suffix.lower() not in data_extensions:
        return False
    
    # Check if it's an excluded file
    if file_path.name.lower() in excluded_patterns:
        return False
    
    # Check for common temporary file patterns
    if file_path.name.startswith('~') or file_path.name.startswith('.~'):
        return False
    
    return True

def get_latest_data_file_date(directory_path):
    """Get the modification date of the most recently modified data file in the directory tree"""
    try:
        data_files = []
        
        # Recursively find all data files
        for file_path in directory_path.rglob("*"):
            if file_path.is_file() and is_visible(file_path) and is_data_file(file_path):
                try:
                    # Get file modification time
                    mtime = file_path.stat().st_mtime
                    data_files.append((file_path, mtime))
                except (OSError, PermissionError) as e:
                    print(f"<!-- Debug: Could not access {file_path}: {e} -->")
                    continue
        
        if not data_files:
            print(f"<!-- Debug: No data files found in {directory_path} -->")
            return "Unknown"
        
        # Find the most recently modified file
        latest_file, latest_mtime = max(data_files, key=lambda x: x[1])
        latest_date = datetime.fromtimestamp(latest_mtime).strftime("%Y-%m-%d")
        
        print(f"<!-- Debug: Latest data file in {directory_path.name}: {latest_file.name} ({latest_date}) -->")
        return latest_date
        
    except Exception as e:
        print(f"<!-- Debug: Error getting latest file date for {directory_path}: {e} -->")
        return "Unknown"

def get_current_release_info(base_path="downloads"):
    """Get information about the Current-Release directory only."""
    base = Path(base_path)
    current_release_path = base / "Current-Release"
    
    if not current_release_path.exists():
        return None
    
    last_modified_date = get_latest_data_file_date(current_release_path)
    
    return {
        "name": "Current-Release",
        "last_modified": last_modified_date,
        "description": "[[CSV]](downloads/Current-Release/CSV/index.qmd)・[[Excel]](downloads/Current-Release/Excel/index.qmd)・[[JSON]](downloads/Current-Release/JSON/index.qmd)"
    }

def get_directory_description(dir_name):
    """Get description for directory types"""
    return f"[[CSV]](downloads/{dir_name}/CSV/index.qmd)・[[Excel]](downloads/{dir_name}/Excel/index.qmd)・[[JSON]](downloads/{dir_name}/JSON/index.qmd)"

def get_all_releases_info(base_path="downloads"):
    """Get information about all directories including Current-Release."""
    try:
        base = Path(base_path)
        if not base.exists():
            print(f"<!-- Debug: {base_path} directory does not exist -->")
            return []
        
        print(f"<!-- Debug: Found {base_path} directory -->")
        directories = []
        
        for item in sorted(base.iterdir()):
            print(f"<!-- Debug: Checking {item.name}, is_dir: {item.is_dir()}, visible: {is_visible(item)} -->")
            
            if item.is_dir() and is_visible(item):
                print(f"<!-- Debug: Processing directory {item.name} -->")
                
                last_modified_date = get_latest_data_file_date(item)
                
                directories.append({
                    "name": item.name,
                    "last_modified": last_modified_date,
                    "description": get_directory_description(item.name)
                })
                print(f"<!-- Debug: Added directory {item.name} with date {last_modified_date} -->")
        
        print(f"<!-- Debug: Total directories found: {len(directories)} -->")
        
        # Sort directories with Current-Release always first, then by last_modified date (newest first)
        def sort_key(directory):
            if directory["name"] == "Current-Release":
                return (0, "")  # Always first
            else:
                # Convert date to sortable format, handle "Unknown" dates
                date_str = directory["last_modified"]
                if date_str == "Unknown":
                    return (2, "")  # Put unknown dates at the end
                else:
                    return (1, date_str)  # Sort by date string (YYYY-MM-DD format sorts correctly)
        
        directories.sort(key=sort_key, reverse=False)
        print(f"<!-- Debug: Directories sorted with Current-Release first -->")
        
        return directories
        
    except Exception as e:
        print(f"<!-- Debug: Error in get_all_releases_info: {e} -->")
        return []

# Load configuration and directory info
config = load_config()
all_releases = get_all_releases_info()

# Print the top-level Markdown content
print(f"""
## {config['title']}
""")

# Intro message
print(f"""All ConnectomeDB ligand-receptor interaction data are freely available under the MIT License 
and are provided **AS IS**, without any warranty. Please use the file navigator below to browse 
and download the most up-to-date database tables. If you have any questions, please feel free 
to [contact us]({config['contact']}).
""")

print("\n---\n")
print("### Available Datasets\n")

# Create DataFrame for table display
import pandas as pd

if all_releases:
    df = pd.DataFrame(all_releases)
    
    # Rename columns for display
    df.rename(columns={
        'name': 'Directory', 
        'last_modified': 'Release Date', 
        'description': 'Downloads'
    }, inplace=True)
    
    print(df.to_markdown(index=False))
else:
    print("| Directory | Release Date | Downloads |")
    print("|-----------|--------------|-----------|")
    print("| No previous releases available | - | - |")

# Closing note

print(f"""
---
If you are using ConnectomeDB, please cite: {config['citation']}
""")
```